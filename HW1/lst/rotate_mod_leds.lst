


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     leds_rotate.s
    2 00000000         ; Author:       Shyamal Anadkat
    3 00000000         ; Description:  Rotates leds by 1 index
    4 00000000         
    5 00000000                 export           rotate_mod_leds
    6 00000000         ;*******************************************************
                       ************************* 
    7 00000000         ; SRAM
    8 00000000         ;*******************************************************
                       ************************* 
    9 00000000                 AREA             SRAM, READWRITE
   10 00000000                 align
   11 00000000         
   12 00000000         ;*******************************************************
                       ************************* 
   13 00000000         ; Constant Variables (FLASH) Segment
   14 00000000         ;*******************************************************
                       ************************* 
   15 00000000                 AREA             FLASH, CODE, READONLY
   16 00000000                 align
   17 00000000         
   18 00000000         ;****************************************
   19 00000000         ; Rename registers for coad readability *
   20 00000000         ;****************************************
   21 00000000        0 
                       LED_ARRAY_ADDR
                               RN               R0          ; passed in as argu
                                                            ment
   22 00000000        1 
                       ARRAY_SIZE
                               RN               R1          ; passed in as argu
                                                            ment
   23 00000000        3 
                       UPDATE_COLOR
                               RN               R3
   24 00000000        4 
                       RED     RN               R4
   25 00000000        5 
                       BLUE    RN               R5
   26 00000000        6 
                       PREV_INDEX
                               RN               R6
   27 00000000        7 
                       POST_INDEX
                               RN               R7
   28 00000000        A 
                       PREV    RN               R10
   29 00000000         
   30 00000000         ;*******************************************************
                       ************************* 
   31 00000000         ; Passed in pointer to LED data on R0, and size of array
                        on R1
   32 00000000         ; Will rotate led data with led_array_data[0] <-- led_ar
                       ray_data[size-1] and
   33 00000000         ; led_array_data[1] <-- led_array_data[0], ...  Also mod
                       ifies data as it 
   34 00000000         ; rotates it adding 0x08 to red, and subtracting 0x08 fr
                       om blue, while leaving
   35 00000000         ; green content unchanged.



ARM Macro Assembler    Page 2 


   36 00000000         ;*******************************************************
                       *************************
   37 00000000         ;; implement EABI compliant function rotate_mod_leds
   38 00000000         ;*******************************************************
                       ************************* 
   39 00000000         ; function rotate_mod_leds
   40 00000000         ;  
   41 00000000         ; Description: 
   42 00000000         ;  rotates array of LED colors by index of 1
   43 00000000         ; Parameters:
   44 00000000         ;  RO - address of led array 
   45 00000000         ;  R1 - array size   
   46 00000000         ; Returns: 
   47 00000000         ;
   48 00000000         ;*******************************************************
                       ************************* 
   49 00000000         rotate_mod_leds
                               PROC
   50 00000000 E92D 1FF0       PUSH             {R4-R12}    ; save regs (EABI)
   51 00000004         
   52 00000004 F1A1 0C01       SUB              R12, ARRAY_SIZE, #1 
                                                            ;arraysize -1 
   53 00000008 F44F 6400       MOV              RED , #0x00000800 
                                                            ;change in red
   54 0000000C F04F 0508       MOV              BLUE, #0x00000008 
                                                            ;change in blue
   55 00000010 F04F 0904       MOV              R9, #4
   56 00000014         
   57 00000014         ;led_array[0] <- led_arrat[size-1] - 0x08 on red, + 0x08
                        on blue
   58 00000014 FB09 FB0C       MUL              R11, R9, R12
   59 00000018 F850 300B       LDR              UPDATE_COLOR, [LED_ARRAY_ADDR, 
R11] 
                                                            ; R3 = ledarray[siz
                                                            e-1] 
   60 0000001C F403 0C7F       AND              R12, UPDATE_COLOR, #0x00FF0000 
                                                            ; preserve green bi
                                                            ts
   61 00000020 4423            ADD              UPDATE_COLOR, UPDATE_COLOR, RED
 
                                                            ; +0x08 on red 
   62 00000022 EBA3 0305       SUB              UPDATE_COLOR, UPDATE_COLOR, BLU
E 
                                                            ; -0x08 on blue 
   63 00000026 F8D0 A000       LDR              PREV, [LED_ARRAY_ADDR, #0] ; st
                                                            ore previous led da
                                                            ta 
   64 0000002A F2C0 0B00       MOVT             R11, #0x0000
   65 0000002E F64F 7BFF       MOV              R11, #0xFFFF
   66 00000032 EA03 030B       AND              UPDATE_COLOR, UPDATE_COLOR, R11
 
                                                            ; clear first 16 bi
                                                            ts
   67 00000036 4463            ADD              UPDATE_COLOR, UPDATE_COLOR, R12
 
                                                            ; preserve green in
                                                            tensity 
   68 00000038 6003            STR              UPDATE_COLOR, [LED_ARRAY_ADDR, 
#0] 



ARM Macro Assembler    Page 3 


                                                            ; write to led_addr
                                                            
   69 0000003A         
   70 0000003A F04F 0600       MOV              PREV_INDEX , #0 ; counter 
   71 0000003E F04F 0700       MOV              POST_INDEX, #0 ; post-counter
   72 00000042         
   73 00000042         LOOP_BEGIN
   74 00000042         ; till array_size -1
   75 00000042 F106 0604       ADD              PREV_INDEX , PREV_INDEX , #4 
                                                            ; increment counter
                                                            
   76 00000046 FB01 FB09       MUL              R11, ARRAY_SIZE, R9 ; compare p
                                                            rev index (4*size)
   77 0000004A 455E            CMP              PREV_INDEX , R11
   78 0000004C D012            BEQ              LOOP_END    ; if reached arrays
                                                            ize-1 end the loop
   79 0000004E         
   80 0000004E         ; led[POST_INDEX] = led[PREV_INDEX] + 0x08 on red, - 0x0
                       8 on blue 
   81 0000004E 4653            MOV              UPDATE_COLOR, PREV
   82 00000050 F403 0C7F       AND              R12, UPDATE_COLOR, #0x00FF0000 
                                                            ; preserve green bi
                                                            ts 
   83 00000054 4423            ADD              UPDATE_COLOR, UPDATE_COLOR, RED
 
                                                            ; +0x08 on red 
   84 00000056 EBA3 0305       SUB              UPDATE_COLOR, UPDATE_COLOR, BLU
E 
                                                            ; -0x08 on blue 
   85 0000005A F850 A006       LDR              PREV, [LED_ARRAY_ADDR, PREV_IND
EX ] 
                                                            ; persist previous 
                                                            led data
   86 0000005E F2C0 0B00       MOVT             R11, #0x0000 ; set mask
   87 00000062 F64F 7BFF       MOV              R11, #0xFFFF
   88 00000066 EA03 030B       AND              UPDATE_COLOR, UPDATE_COLOR, R11
 
                                                            ; clear first 16 bi
                                                            ts
   89 0000006A 4463            ADD              UPDATE_COLOR, UPDATE_COLOR, R12
 
                                                            ; preserve green in
                                                            tensity 
   90 0000006C 5183            STR              UPDATE_COLOR, [LED_ARRAY_ADDR, 
PREV_INDEX ] 
                                                            ; write to led_addr
                                                            
   91 0000006E         
   92 0000006E F107 0704       ADD              POST_INDEX, POST_INDEX, #4 
                                                            ; increment cntr
   93 00000072 E7E6            B                LOOP_BEGIN  ; branch to begin 
   94 00000074         
   95 00000074         LOOP_END                             ; end of loop 
   96 00000074         
   97 00000074 E8BD 1FF0       POP              {R4-R12}    ; restore regs modi
                                                            fied 
   98 00000078 4770            BX               LR          ; return from funct
                                                            ion
   99 0000007A                 ENDP



ARM Macro Assembler    Page 4 


  100 0000007A 00 00           align
  101 0000007C         
  102 0000007C         
  103 0000007C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\rotate_mod_leds.d -o.\obj\rotate_mod_leds.o -IC:\ECE353\H
W1\RTE\_HW1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\AR
M\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" -
-predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 522" --prede
fine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\lst\rotate_mod_l
eds.lst rotate_mod_leds.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 9 in file rotate_mod_leds.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 15 in file rotate_mod_leds.s
   Uses
      None
Comment: FLASH unused
LOOP_BEGIN 00000042

Symbol: LOOP_BEGIN
   Definitions
      At line 73 in file rotate_mod_leds.s
   Uses
      At line 93 in file rotate_mod_leds.s
Comment: LOOP_BEGIN used once
LOOP_END 00000074

Symbol: LOOP_END
   Definitions
      At line 95 in file rotate_mod_leds.s
   Uses
      At line 78 in file rotate_mod_leds.s
Comment: LOOP_END used once
rotate_mod_leds 00000000

Symbol: rotate_mod_leds
   Definitions
      At line 49 in file rotate_mod_leds.s
   Uses
      At line 5 in file rotate_mod_leds.s
Comment: rotate_mod_leds used once
4 symbols
349 symbols in table
