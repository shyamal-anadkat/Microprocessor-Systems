


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       Shyamal Anadkat
    3 00000000         ; Description:  ICE01
    4 00000000         
    5 00000000                 export           __main
    6 00000000         
    7 00000000         ;**********************************************
    8 00000000         ; SRAM
    9 00000000         ;**********************************************
   10 00000000                 AREA             SRAM, READWRITE
   11 00000000                 align
   12 00000000         
   13 00000000         ;**********************************************
   14 00000000         ; Constant Variables (FLASH) Segment
   15 00000000         ;**********************************************
   16 00000000                 AREA             FLASH, CODE, READONLY
   17 00000000                 align
   18 00000000         
   19 00000000         ;**********************************************
   20 00000000         ; Code (FLASH) Segment
   21 00000000         ; main assembly program
   22 00000000         ;**********************************************
   23 00000000         __main  PROC
   24 00000000         
   25 00000000         ; DO NOT MODIFY ANTHING ABOVE THIS LINE!!! 
   26 00000000         
   27 00000000         
   28 00000000         ; CHECK POINT (1)
   29 00000000         ; Initialize R1 to be 20 (decimal)
   30 00000000 F04F 0114       MOV              R1, #20
   31 00000004         
   32 00000004         ; CHECK POINT (2)
   33 00000004         ; Add 15 to R1 using an immediate
   34 00000004 F101 010F       ADD              R1, R1, #15
   35 00000008         
   36 00000008         ; CHECK POINT (3)
   37 00000008         ; Multiply R1 by 3
   38 00000008 F04F 0003       MOV              R0, #3
   39 0000000C FB01 F100       MUL              R1, R1, R0
   40 00000010         
   41 00000010         ; CHECK POINT (4)
   42 00000010         ; Clear (set to 0) bits 4:0 of R1
   43 00000010         ; All other bits should not be affected
   44 00000010 F021 011F       BIC              R1, R1, #0x1F
   45 00000014         
   46 00000014         ; CHECK POINT (5)
   47 00000014         ; Set bits 31:25 and 21:16 of R1 to be a 1
   48 00000014         ; All other bits should not be affected
   49 00000014 F6CF 6334       MOVT             R3, #0xFE34
   50 00000018 EA41 0103       ORR              R1, R1, R3
   51 0000001C         
   52 0000001C         ; CHECK POINT (6)
   53 0000001C         ; Invert ONLY bits 3-9 of R1
   54 0000001C F44F 777E       MOV              R7, #0x03F8
   55 00000020 EA87 0101       EOR              R1, R7, R1
   56 00000024         
   57 00000024         
   58 00000024         ; CHECK POINT (7) 
   59 00000024         ; Move the contents of R1 to R0



ARM Macro Assembler    Page 2 


   60 00000024 4608            MOV              R0, R1
   61 00000026         
   62 00000026         ; CHECK POINT (8) 
   63 00000026         ; Total the bytes in R0 and place the results in R2
   64 00000026         ; R2 = R0[31:24] + R0[23:16] + R0[15:8] + R0[7:0]
   65 00000026         ; Treat each byte an an unsigned 8-bit number
   66 00000026 F000 08FF       AND              R8, R0, #0x000000FF
   67 0000002A F400 497F       AND              R9, R0, #0x0000FF00
   68 0000002E EA4F 2929       ASR              R9, R9, #8
   69 00000032 EB08 0A09       ADD              R10, R8, R9
   70 00000036 F400 0B7F       AND              R11, R0, #0x00FF0000
   71 0000003A EA4F 4B2B       ASR              R11, R11, #16
   72 0000003E F000 4C7F       AND              R12, R0, #0xFF000000
   73 00000042 EA4F 6C2C       ASR              R12, R12, #24
   74 00000046 EB0B 040C       ADD              R4, R11, R12
   75 0000004A EB04 020A       ADD              R2, R4, R10
   76 0000004E         
   77 0000004E         ; CHECK POINT (9) 
   78 0000004E         ; Initialize R4 to be decimal value 100
   79 0000004E         ; Initialize R5 to be decimal value 110
   80 0000004E         ; Without using the subtract instruction, subtract R5 fr
                       om R4
   81 0000004E         ; and place the results in R6.  Use as many ARM assembly
                        
   82 0000004E         ; instructions as needed.
   83 0000004E F04F 0464       MOV              R4, #100
   84 00000052 F04F 056E       MOV              R5,#110
   85 00000056 EA6F 0505       MVN              R5, R5
   86 0000005A F105 0501       ADD              R5, R5, #1
   87 0000005E EB05 0604       ADD              R6, R5, R4
   88 00000062         
   89 00000062         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!!
   90 00000062         
   91 00000062         INFINITE_LOOP
   92 00000062 E7FE            B                INFINITE_LOOP
   93 00000064                 ENDP
   94 00000064                 align
   95 00000064         
   96 00000064         
   97 00000064                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\ece353_main.d -o.\obj\ece353_main.o -II:\ECE353\ICE-01-ALU\RTE -IC:\AppV\mdk_5
10\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\AppV\mdk_510\ARM\PACK\Keil\TM4C_
DFP\1.0.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__MIC
ROLIB SETA 1" --list=.\lst\ece353_main.lst ece353_main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 10 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 16 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 00000062

Symbol: INFINITE_LOOP
   Definitions
      At line 91 in file ece353_main.s
   Uses
      At line 92 in file ece353_main.s
Comment: INFINITE_LOOP used once
__main 00000000

Symbol: __main
   Definitions
      At line 23 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
3 symbols
337 symbols in table
