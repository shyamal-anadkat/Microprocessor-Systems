


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       Shyamal H Anadkat 
    3 00000000         ; Description:  ICE04
    4 00000000         
    5 00000000                 export           __main
    6 00000000         
    7 00000000         ;******************************************
    8 00000000         ; Symbolic Constants
    9 00000000         ;****************************************** 
   10 00000000 00000004 
                       WORD    EQU              4
   11 00000000         
   12 00000000         
   13 00000000         ;******************************************
   14 00000000         ; SRAM
   15 00000000         ;******************************************
   16 00000000                 AREA             SRAM, READWRITE
   17 00000000         ;******************************************
   18 00000000         ; Load Store Review
   19 00000000         ;******************************************
   20 00000000 00 00 00 
              00       RESULT  SPACE            1*WORD
   21 00000004         
   22 00000004         ;******************************************
   23 00000004         ; Load Store Multiple
   24 00000004         ;******************************************
   25 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DEST_ARRAY
                               SPACE            32*WORD
   26 00000084 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DEST2_ARRAY
                               SPACE            32*WORD
   27 00000104 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DEST3_ARRAY
                               SPACE            32*WORD
   28 00000184                 align
   29 00000184         
   30 00000184         
   31 00000184         
   32 00000184         
   33 00000184         
   34 00000184         ;**********************************************
   35 00000184         ; FLASH
   36 00000184         ;**********************************************
   37 00000184                 AREA             FLASH, CODE, READONLY
   38 00000000         ;******************************************
   39 00000000         ; Load Store Review
   40 00000000         ;******************************************
   41 00000000 45 43 45 
              33 35 33 ASCII_ARRAY
                               DCB              "ECE353"
   42 00000006 00              DCB              0
   43 00000007         
   44 00000007         ;******************************************



ARM Macro Assembler    Page 4 


   45 00000007         ; Load Store Multiple
   46 00000007         ;******************************************
   47 00000007 00 00000000 
                       SRC_ARRAY
                               DCD              0x00000000
   48 0000000C 00001111        DCD              0x00001111
   49 00000010 00002222        DCD              0x00002222
   50 00000014 00003333        DCD              0x00003333
   51 00000018 00004444        DCD              0x00004444
   52 0000001C 00005555        DCD              0x00005555
   53 00000020 00006666        DCD              0x00006666
   54 00000024 00007777        DCD              0x00007777
   55 00000028 00008888        DCD              0x00008888
   56 0000002C 00009999        DCD              0x00009999
   57 00000030 0000AAAA        DCD              0x0000AAAA
   58 00000034 0000BBBB        DCD              0x0000BBBB
   59 00000038 0000CCCC        DCD              0x0000CCCC
   60 0000003C 0000DDDD        DCD              0x0000DDDD
   61 00000040 0000EEEE        DCD              0x0000EEEE
   62 00000044 0000FFFF        DCD              0x0000FFFF
   63 00000048 11110000        DCD              0x11110000
   64 0000004C 11111111        DCD              0x11111111
   65 00000050 11112222        DCD              0x11112222
   66 00000054 11113333        DCD              0x11113333
   67 00000058 11114444        DCD              0x11114444
   68 0000005C 11115555        DCD              0x11115555
   69 00000060 11116666        DCD              0x11116666
   70 00000064 11117777        DCD              0x11117777
   71 00000068 11118888        DCD              0x11118888
   72 0000006C 11119999        DCD              0x11119999
   73 00000070 1111AAAA        DCD              0x1111AAAA
   74 00000074 1111BBBB        DCD              0x1111BBBB
   75 00000078 1111CCCC        DCD              0x1111CCCC
   76 0000007C 1111DDDD        DCD              0x1111DDDD
   77 00000080 1111EEEE        DCD              0x1111EEEE
   78 00000084 1111FFFF        DCD              0x1111FFFF
   79 00000088                 align
   80 00000088         
   81 00000088         
   82 00000088         
   83 00000088         
   84 00000088         
   85 00000088         ;**********************************************
   86 00000088         ; Code (FLASH) Segment
   87 00000088         ; main assembly program
   88 00000088         ;**********************************************
   89 00000088         __main  PROC
   90 00000088         
   91 00000088         ;******************************************
   92 00000088         ; Load Store Review
   93 00000088         ;******************************************
   94 00000088 F2AF 008C       ADR              R0, ASCII_ARRAY
   95 0000008C 491E            LDR              R1, =(RESULT)
   96 0000008E F04F 0100       MOV              R1, #0
   97 00000092 F04F 0200       MOV              R2, #0
   98 00000096         
   99 00000096         
  100 00000096         WHILE_START
  101 00000096         ;check if curr is 0



ARM Macro Assembler    Page 5 


  102 00000096 F04F 0300       MOV              R3, #0
  103 0000009A F04F 0200       MOV              R2, #0
  104 0000009E F810 2B01       LDRB             R2, [R0], #1
  105 000000A2 4613            MOV              R3, R2
  106 000000A4 2A00            CMP              R2, #0x0
  107 000000A6 D005            BEQ              WHILE_DONE
  108 000000A8         ;check if curr in range
  109 000000A8 F1A2 0230       SUB              R2, R2, #0x30
  110 000000AC 2A0A            CMP              R2, #10
  111 000000AE BFB8 18C9       ADDLT            R1, R1, R3
  112 000000B2 E7F0            B                WHILE_START
  113 000000B4         WHILE_DONE
  114 000000B4         
  115 000000B4         ;******************************************
  116 000000B4         ; Load Store Multiple
  117 000000B4         ;******************************************
  118 000000B4         ; Load the address of SRC_ARRAY into R0
  119 000000B4 F2AF 00B0       ADR              R0, SRC_ARRAY
  120 000000B8         
  121 000000B8         ; Load the address of DEST_ARRAY into R1
  122 000000B8 4914            LDR              R1, =(DEST_ARRAY)
  123 000000BA         
  124 000000BA         
  125 000000BA         ; Load the address of DEST2_ARRAY into R2
  126 000000BA 4A15            LDR              R2, =(DEST2_ARRAY)
  127 000000BC         
  128 000000BC         ; Using LDM, load the first 8 WORDs in SRC_ARRAY
  129 000000BC         ; Use Registers R3-R10 as the destination 
  130 000000BC         ; of the LDM instruction
  131 000000BC E890 07F8       LDM              R0, {R3-R10}
  132 000000C0         
  133 000000C0         ; Use STM to store R3-R10 to DEST_ARRAY
  134 000000C0 E881 07F8       STM              R1, {R3-R10}
  135 000000C4         
  136 000000C4         
  137 000000C4         ; Use STM to store R3-R10 to DEST2_ARRAY
  138 000000C4         ; Specify the order of the registers in
  139 000000C4         ; revers order (STM R2, {R10, R9, R8, R7, R6, R5, R4, R3
                       })
  140 000000C4         ; Observe if the order of the registers changes
  141 000000C4         ; how the data arranged in SRAM
  142 000000C4 E882 07F8       STM              R2, {R10, R9, R8, R7, R6, R5, R
4, R3}
  143 000000C8         
  144 000000C8         
  145 000000C8         
  146 000000C8         ; Using LDM, load the second 8 WORDs in SRC_ARRAY
  147 000000C8         ; Use Registers R3-R10 as the destination 
  148 000000C8         ; of the LDM instruction.
  149 000000C8         ; Hint, you will need to modify R0 so that
  150 000000C8         ; it contains the address of SRC_ARRAY[8]
  151 000000C8 F100 0020       ADD              R0, R0, #32
  152 000000CC E890 07F8       LDM              R0, {R3-R10}
  153 000000D0         
  154 000000D0         
  155 000000D0         
  156 000000D0         ; Use STM to store R3-R10 to DEST_ARRAY[8]
  157 000000D0         ; Hint, you will need to modify R1 so that
  158 000000D0         ; it contains the address of DEST_ARRAY[8]



ARM Macro Assembler    Page 6 


  159 000000D0 F101 0120       ADD              R1, R1, #32
  160 000000D4 E881 07F8       STM              R1, {R3-R10}
  161 000000D8         
  162 000000D8         
  163 000000D8         ; Copy the contents of SRC_ARRAY to DEST2_ARRAY
  164 000000D8         ; 8 WORDs at a time using LDM/STM. This time use
  165 000000D8         ; the version of LDM/STM that updates the base address
  166 000000D8         ; Load the address of SRC_ARRAY into R0
  167 000000D8 F2AF 00D4       ADR              R0, SRC_ARRAY
  168 000000DC 4F0C            LDR              R7, =(DEST2_ARRAY)
  169 000000DE C818            LDM              R0!, {R3-R4} ; R0 <- R0 + 8
  170 000000E0 C718            STM              R7!, {R3-R4} ; R7 <- R7 + 8
  171 000000E2 C818            LDM              R0!, {R3-R4} ; R0 <- R0 + 8
  172 000000E4 C718            STM              R7!, {R3-R4} ; R7 <- R7 + 8
  173 000000E6 C818            LDM              R0!, {R3-R4} ; R0 <- R0 + 8
  174 000000E8 C718            STM              R7!, {R3-R4} ; R7 <- R7 + 8
  175 000000EA C818            LDM              R0!, {R3-R4} ; R0 <- R0 + 8
  176 000000EC C718            STM              R7!, {R3-R4} ; R7 <- R7 + 8
  177 000000EE         
  178 000000EE         
  179 000000EE         ; Write code that uses a loop to copies SRC_ARRAY
  180 000000EE         ; to DEST3_ARRAY.  Each iteraction of the loop should
  181 000000EE         ; copy 4 WORDs of the array
  182 000000EE         ; 
  183 000000EE         ; for(i = 0; i < 8; i++)
  184 000000EE         ; {
  185 000000EE         ;       Copy 4 WORDs from SRC_ARRAY to DEST3_ARRAY
  186 000000EE         ; }
  187 000000EE F2AF 00E8       ADR              R0, SRC_ARRAY
  188 000000F2 4A08            LDR              R2, =(DEST3_ARRAY)
  189 000000F4 F04F 0300       MOV              R3, #0
  190 000000F8         
  191 000000F8         LOOP_START
  192 000000F8 2B08            CMP              R3, #8
  193 000000FA D004            BEQ              LOOP_END
  194 000000FC C8F0            LDM              R0!, {R4-R7}
  195 000000FE C2F0            STM              R2!, {R4-R7}
  196 00000100 F103 0301       ADD              R3, R3, #1
  197 00000104 E7F8            B                LOOP_START
  198 00000106         LOOP_END
  199 00000106         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!!
  200 00000106         
  201 00000106         INFINITE_LOOP
  202 00000106 E7FE            B                INFINITE_LOOP
  203 00000108         
  204 00000108                 ENDP
  205 00000108                 align
  206 00000108         
  207 00000108         
  208 00000108                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\ece353_main.d -o.\obj\ece353_main.o -II:\ECE353\ICE-04-LoadStoreMultiple\RTE -
IC:\AppV\mdk_510\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\AppV\mdk_510\ARM\P
ACK\Keil\TM4C_DFP\1.0.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --pr
edefine="__MICROLIB SETA 1" --list=.\lst\ece353_main.lst ece353_main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DEST2_ARRAY 00000084

Symbol: DEST2_ARRAY
   Definitions
      At line 26 in file ece353_main.s
   Uses
      At line 126 in file ece353_main.s
      At line 168 in file ece353_main.s

DEST3_ARRAY 00000104

Symbol: DEST3_ARRAY
   Definitions
      At line 27 in file ece353_main.s
   Uses
      At line 188 in file ece353_main.s
Comment: DEST3_ARRAY used once
DEST_ARRAY 00000004

Symbol: DEST_ARRAY
   Definitions
      At line 25 in file ece353_main.s
   Uses
      At line 122 in file ece353_main.s
Comment: DEST_ARRAY used once
RESULT 00000000

Symbol: RESULT
   Definitions
      At line 20 in file ece353_main.s
   Uses
      At line 95 in file ece353_main.s
Comment: RESULT used once
SRAM 00000000

Symbol: SRAM
   Definitions
      At line 16 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ASCII_ARRAY 00000000

Symbol: ASCII_ARRAY
   Definitions
      At line 41 in file ece353_main.s
   Uses
      At line 94 in file ece353_main.s
Comment: ASCII_ARRAY used once
FLASH 00000000

Symbol: FLASH
   Definitions
      At line 37 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 00000106

Symbol: INFINITE_LOOP
   Definitions
      At line 201 in file ece353_main.s
   Uses
      At line 202 in file ece353_main.s
Comment: INFINITE_LOOP used once
LOOP_END 00000106

Symbol: LOOP_END
   Definitions
      At line 198 in file ece353_main.s
   Uses
      At line 193 in file ece353_main.s
Comment: LOOP_END used once
LOOP_START 000000F8

Symbol: LOOP_START
   Definitions
      At line 191 in file ece353_main.s
   Uses
      At line 197 in file ece353_main.s
Comment: LOOP_START used once
SRC_ARRAY 00000008

Symbol: SRC_ARRAY
   Definitions
      At line 47 in file ece353_main.s
   Uses
      At line 119 in file ece353_main.s
      At line 167 in file ece353_main.s
      At line 187 in file ece353_main.s

WHILE_DONE 000000B4

Symbol: WHILE_DONE
   Definitions
      At line 113 in file ece353_main.s
   Uses
      At line 107 in file ece353_main.s
Comment: WHILE_DONE used once
WHILE_START 00000096



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: WHILE_START
   Definitions
      At line 100 in file ece353_main.s
   Uses
      At line 112 in file ece353_main.s
Comment: WHILE_START used once
__main 00000088

Symbol: __main
   Definitions
      At line 89 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

WORD 00000004

Symbol: WORD
   Definitions
      At line 10 in file ece353_main.s
   Uses
      At line 20 in file ece353_main.s
      At line 25 in file ece353_main.s
      At line 26 in file ece353_main.s
      At line 27 in file ece353_main.s

1 symbol
350 symbols in table
